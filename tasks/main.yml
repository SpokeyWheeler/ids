---
# tasks file for ids

- name: check if this version is already installed
  stat:
    path: "{{ ids_install_path }}/.install_complete"
  register: st
  ignore_errors: true

- name: set already installed flag if necessary
  set_fact:
    ids_version_previously_installed: true
  when: st.stat.exists is defined and st.stat.exists

- name: check if force install flag is set
  set_fact:
    ids_version_previously_installed: false
  when: force_ids_install

- name: set the install media file name if HCL
  set_fact:
    ids_install_media_name: "hcl.ids.{{ ids_version }}.LNX.tar.gz"
  when: vendor == "hcl"

- name: set the install media file name if IBM
  set_fact:
    ids_install_media_name: "iif.{{ ids_version }}.linux-x86_64.tar"
  when: vendor == "ibm"

- name: set selinux permissive
  selinux:
    policy: targeted
    state: permissive
  when: ansible_facts['os_family'] == "RedHat"

- name: install IDS prerequisites on RedHat platforms
  yum:
    name:
    - libaio.x86_64
    - libgcc.x86_64
    - libstdc++.x86_64
    - ncurses.x86_64
    - pam.x86_64
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2
  when: ansible_facts['os_family'] == "RedHat"

- name: install IDS prerequisites on Debian platforms
  apt:
    name:
    - python2.7
    - openjdk-8-jdk
    - libgcc1
    - libncurses5
    - libpam-runtime
    - libstdc++6
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2
  when: ansible_facts['os_family'] == "Debian"

- name: install IDS prerequisites on SuSE platforms
  zypper:
    name:
    - java-1_8_0-openjdk
    - libgcc_s1
    - libstdc++6
    - ncurses-utils
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2
  when: ansible_facts['os_family'] == "Suse"

- name: bail out if this version was previously installed and force install is not set
  fail:
    msg: "Aborting as IDS {{ ids_version }} was previously installed. Set force_ids_install true in vars to force"
  when: ids_version_previously_installed

- name: create informix group
  group:
    name: informix
    state: present
    system: false

- name: create informix user
  user:
    home: /opt/informix
    group: informix
    name: informix
    shell: /bin/bash
    state: present
    system: false

- name: create target install directory
  file:
    group: informix
    mode: 0775
    owner: informix
    path: "{{ ids_install_path }}"
    state: directory

- name: create temp install directory
  file:
    group: informix
    mode: 0775
    owner: informix
    path: "{{ ids_tmp_path }}"
    state: directory

- name: upload / download and extract IDS installer
  unarchive:
    dest: "{{ ids_tmp_path }}"
    src: "{{ source_location_of_ids_media }}/{{ ids_install_media_name }}"

- name: run installer
  become: true
  command: ./ids_install -i silent -DLICENSE_ACCEPTED=true -DUSER_INSTALL_DIR="{{ ids_install_path }}"
  args:
    chdir: "{{ ids_tmp_path }}"
  when: not ids_version_previously_installed

- name: validate install
  stat:
    path: "{{ ids_install_path }}/bin/dbaccess"
  register: val
  ignore_errors: true

- name: abort install failed
  fail:
    msg: "Install failed - dbaccess does not exist or is zero bytes"
  when: not val.stat.exists or val.stat.size == 0

- name: make this the default version by linking "informixdir" to it
  file:
    group: informix
    mode: 0775
    owner: informix
    src: "{{ ids_install_path }}"
    dest: "{{ ids_base_path }}/informixdir"
    state: link

- name: clean up
  file:
    group: informix
    mode: 0775
    owner: informix
    path: "{{ ids_tmp_path }}"
    state: absent

- name: mark installation as complete
  file:
    group: informix
    mode: 0400
    owner: informix
    path: "{{ ids_install_path }}/.install_complete"
    state: touch
